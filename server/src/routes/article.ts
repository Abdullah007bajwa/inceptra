// server/src/routes/article.ts

import express, { Request, Response } from "express";
import { z } from "zod";
import dotenv from "dotenv";
import { InferenceClient } from "@huggingface/inference";
import { prisma } from "../utils/db.js";
import { requireAuth } from "../middleware/clerkAuth.js";
import { enforceDailyLimit } from "../middleware/rateLimit.js";

type AuthedRequest = Request & { auth?: { userId?: string } };

dotenv.config();

const router = express.Router();

// Create HF client
const hfClient = new InferenceClient(process.env.HF_TOKEN!);

const inputSchema = z.object({
  title: z.string().min(5, "Title must be at least 5 characters."),
  length: z.enum(["short", "medium", "long"]),
});

const lengthMap: Record<"short" | "medium" | "long", number> = {
  short: 200,
  medium: 500,
  long: 800,
};

router.post(
  "/",
  requireAuth,
  enforceDailyLimit("article-generator"),
  async (req: Request, res: Response) => {
    const userId = (req as AuthedRequest).auth?.userId;

    if (!userId) {
      console.error("❌ Missing userId from authenticated request");
      return res.status(401).json({
        success: false,
        error: "Unauthorized: Missing user ID.",
      });
    }

    const parsed = inputSchema.safeParse(req.body);
    if (!parsed.success) {
      console.warn("🧨 Invalid input:", parsed.error.flatten());
      return res.status(400).json({
        success: false,
        error: "Invalid input",
        details: parsed.error.flatten(),
      });
    }

    const { title, length } = parsed.data;
    const wordCount = lengthMap[length];

    const messages = [
      {
        role: "system",
        content: "You are an expert content writer. Produce a high-quality, engaging article.",
      },
      {
        role: "user",
        content: `Write a blog article of approximately ${wordCount} words titled: "${title}".`,
      },
    ];

    try {
      // Add timeout wrapper for the API call
      const completionPromise = hfClient.chatCompletion({
        provider: "auto",
        model: "deepseek-ai/DeepSeek-R1-0528",
        messages,
      });

      // Create a timeout promise
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error("Request timeout")), 30000);
      });

      // Race between completion and timeout
      const completion = await Promise.race([completionPromise, timeoutPromise]) as any;

      const article = completion?.choices?.[0]?.message?.content?.trim();

      if (!article) {
        throw new Error("No content was generated by the language model.");
      }

      await prisma.generationHistory.create({
        data: {
          userId,
          feature: "article-generator",
          input: { title, length },
          output: { article },
        },
      });

      console.log(`✅ Article generated and saved for user: ${userId}`);
      return res.status(200).json({
        success: true,
        message: "Article generated successfully.",
        data: {
          title,
          length,
          wordCount,
          article,
        },
      });
    } catch (err: any) {
      console.error("🧨 Article generation error:", err?.response?.data || err.message || err);

      // Provide user-friendly error messages
      let errorMessage = "Failed to generate article.";
      if (err.message === "Request timeout") {
        errorMessage = "Request timed out. Please try again.";
      } else if (err?.response?.status === 429) {
        errorMessage = "Rate limit exceeded. Please try again later.";
      }

      return res.status(500).json({
        success: false,
        error: errorMessage,
      });
    }
  }
);

export default router;
